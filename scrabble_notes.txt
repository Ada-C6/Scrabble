==================
====   key   =====
==================

alyssahursh = Alyssa (remote repo host)
jm-rives = Joanna M. Rives (remote repo collaborater)

TODO: handle = assigns task to specific dev

[ ] = requirement for current test suite
{ } = needs test suite

######################
### Learning Goals ###
######################

[ ] Use Test Driven Development (TDD) to write tests and code in parallel
[ ] Create class and instance methods according to requirements
[ ] Utilize Single Responsibility Principle to reduce code dependencies
[ ] Utilize composition between classes, where appropriate

#########################
#### Agile Workflow #####
#########################

~ roles will switch every 30 minutes utilizing a timer
~ 5 minute check in after switch
~ feedback will be direct and spoken kindly and plainly

###############################
#### Project Expectations ####
##############################

[x] from project root file 
    (x) execute specs files by running RAKE { }
[ ] lib should contain
    ( )  multiple files of ruby classess ( each ruby class gets its own file in lib) { }
    (X)  module named "Scrabble" encloses entire project                                        { } 
[x] Scrable::Scoring class contains data struture to store the individal letter scores as below

Letter                        Value

A, E, I, O, U, L, N, R, S, T   1
D, G                           2
B, C, M, P                     3
F, H, V, W, Y                  4
K                              5
J, X                           8
Q, Z                           10

[x ] utilize minitest specs format
[x ] organize tests into DESCRIBE blocks
[ ] use require { }
[x ] use require realtive { }
[ ] use include 

################
#### WAVE 1 ####
################

[] Scrabble::Scoring class must have >= ** 8 ** specs   {-}
    ( ) contains self.score(word)                         {-}
        < > returns word score                             {x }
        < > word input is a STRING                          {x }
        < > seven letter words recieve a 50 PT BONUS          {x }
[ ] self.highest_score_from(array_of_words)
    ( )  returns the word in the array with the highest score  {x }
    ( ) IF tie
        ( ) word composed of fewest tiles wins                  {x }
            UNLESS
        ( ) top score is a tie between multiple words and one 7 letter word  {x }
             THEN
             7 letter word wins
        ( ) IF multiple words of == tile length and multiple words of == score {x }
            Then first word in array wins


#####################
#### END WAVE 1 ####
####################





 *** DO ADVANCE TO NEXT REQUIREMENT TIER UNTIL MVP MET AND TEST ALL GREEN ***

